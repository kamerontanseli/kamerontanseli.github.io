{"ast":null,"code":"var _jsxFileName = \"/Users/kameron/Desktop/kamerontanseli.github.io/src/pages/category/[slug].js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport matter from \"gray-matter\";\nimport SEO from \"../../components/new/Seo\";\n\nconst Category = ({\n  category,\n  posts\n}) => {\n  return __jsx(\"div\", {\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }\n  }, __jsx(SEO, {\n    title: `Kameron Tanseli | ${category}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }\n  }), __jsx(_JSXStyle, {\n    id: \"419940685\",\n    __self: this\n  }, \".columns.jsx-419940685{display:grid;grid-template-columns:1fr;grid-gap:2em;padding-bottom:2em;border-bottom:1px solid #eee;}img.jsx-419940685{max-width:60px;border-radius:60px;}.content.jsx-419940685>*.jsx-419940685:first-child{margin-top:0;}.content.jsx-419940685>*.jsx-419940685:last-child{margin-bottom:0;}.articles.jsx-419940685{overflow:auto;}.articles.jsx-419940685 table.jsx-419940685{width:100%;text-align:left;}.articles.jsx-419940685 table.jsx-419940685 tr.jsx-419940685>td.jsx-419940685{padding:1em 0;}.articles.jsx-419940685 table.jsx-419940685 tr.jsx-419940685>td.jsx-419940685:first-child{width:150px;color:#676767;}.article-item__category.jsx-419940685>a.jsx-419940685{text-transform:capitalize;font-size:0.65em;padding:5px 10px;background-color:#eee;border-radius:4px;-webkit-text-decoration:none;text-decoration:none;}.article-item__category.jsx-419940685>a.jsx-419940685:hover{background-color:#ddd;}@media screen and (max-width:769px){.columns.jsx-419940685{grid-template-columns:1fr;}.article-item__date.jsx-419940685{display:none;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9rYW1lcm9uL0Rlc2t0b3Ava2FtZXJvbnRhbnNlbGkuZ2l0aHViLmlvL3NyYy9wYWdlcy9jYXRlZ29yeS9bc2x1Z10uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT2tCLEFBR3dCLEFBT0UsQUFJRixBQUdHLEFBSUYsQUFJSCxBQUtHLEFBSUYsQUFLYyxBQVNKLEFBS00sQUFHYixXQTlCQyxDQVNGLENBL0JZLEFBVzVCLEFBMENFLENBbkNGLEFBU0EsQ0FwQnFCLENBT3JCLE1BK0JBLElBYkEsQUFJbUIsQUFjakIsQ0EzQkYsT0FmQSxLQVBlLElBb0NJLFNBbkNFLFFBb0NHLFdBbkNPLFdBb0NYLGtCQW5DcEIsQUFvQ3VCLGtEQUN2QiIsImZpbGUiOiIvVXNlcnMva2FtZXJvbi9EZXNrdG9wL2thbWVyb250YW5zZWxpLmdpdGh1Yi5pby9zcmMvcGFnZXMvY2F0ZWdvcnkvW3NsdWddLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1hdHRlciBmcm9tIFwiZ3JheS1tYXR0ZXJcIjtcbmltcG9ydCBTRU8gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvbmV3L1Nlb1wiO1xuXG5jb25zdCBDYXRlZ29yeSA9ICh7IGNhdGVnb3J5LCBwb3N0cyB9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxTRU8gdGl0bGU9e2BLYW1lcm9uIFRhbnNlbGkgfCAke2NhdGVnb3J5fWB9IC8+XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5jb2x1bW5zIHtcbiAgICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgICAgICAgIGdyaWQtZ2FwOiAyZW07XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDJlbTtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTtcbiAgICAgICAgfVxuICAgICAgICBpbWcge1xuICAgICAgICAgIG1heC13aWR0aDogNjBweDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA2MHB4O1xuICAgICAgICB9XG4gICAgICAgIC5jb250ZW50ID4gKjpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgfVxuICAgICAgICAuY29udGVudCA+ICo6bGFzdC1jaGlsZCB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5hcnRpY2xlcyB7XG4gICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgIH1cblxuICAgICAgICAuYXJ0aWNsZXMgdGFibGUge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIH1cblxuICAgICAgICAuYXJ0aWNsZXMgdGFibGUgdHIgPiB0ZCB7XG4gICAgICAgICAgcGFkZGluZzogMWVtIDA7XG4gICAgICAgIH1cblxuICAgICAgICAuYXJ0aWNsZXMgdGFibGUgdHIgPiB0ZDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICAgd2lkdGg6IDE1MHB4O1xuICAgICAgICAgIGNvbG9yOiAjNjc2NzY3O1xuICAgICAgICB9XG5cbiAgICAgICAgLmFydGljbGUtaXRlbV9fY2F0ZWdvcnkgPiBhIHtcbiAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcbiAgICAgICAgICBmb250LXNpemU6IDAuNjVlbTtcbiAgICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAuYXJ0aWNsZS1pdGVtX19jYXRlZ29yeSA+IGE6aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XG4gICAgICAgIH1cblxuICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjlweCkge1xuICAgICAgICAgIC5jb2x1bW5zIHtcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyO1xuICAgICAgICAgIH1cbiAgICAgICAgICAuYXJ0aWNsZS1pdGVtX19kYXRlIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbHVtbnNcIj5cbiAgICAgICAgPGltZyB3aWR0aD17MTUwfSBzcmM9XCIvc3RhdGljL3Byb2ZpbGUucG5nXCIgYWx0PVwiS2FtZXJvbiBUYW5zZWxpXCIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XG4gICAgICAgICAgPGgxIHN0eWxlPXt7IHRleHRUcmFuc2Zvcm06IFwiY2FwaXRhbGl6ZVwiIH19PntjYXRlZ29yeX08L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhcnRpY2xlc1wiPlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAge3Bvc3RzLm1hcCgocG9zdCkgPT4gKFxuICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYXJ0aWNsZS1pdGVtXCIga2V5PXtwb3N0LnNsdWd9PlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJhcnRpY2xlLWl0ZW1fX2RhdGVcIj5cbiAgICAgICAgICAgICAgICAgIHtuZXcgRGF0ZShwb3N0LmRvY3VtZW50LmRhdGEuZGF0ZSkudG9EYXRlU3RyaW5nKCl9XG4gICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICA8YSBocmVmPXtgL2Jsb2cvJHtwb3N0LnNsdWd9L2B9Pntwb3N0LmRvY3VtZW50LmRhdGEudGl0bGV9PC9hPlxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImFydGljbGUtaXRlbV9fY2F0ZWdvcnlcIj5cbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2AvY2F0ZWdvcnkvJHtwb3N0LmRvY3VtZW50LmRhdGEuY2F0ZWdvcnl9L2B9PlxuICAgICAgICAgICAgICAgICAgICB7cG9zdC5kb2N1bWVudC5kYXRhLmNhdGVnb3J5fVxuICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RhdGljUHJvcHMoeyBwYXJhbXMgfSkge1xuICBjb25zdCBjYXRlZ29yeSA9IHBhcmFtcy5zbHVnO1xuICAvL2dldCBwb3N0cyAmIGNvbnRleHQgZnJvbSBmb2xkZXJcbiAgY29uc3QgcG9zdHMgPSAoKGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBrZXlzID0gY29udGV4dC5rZXlzKCk7XG4gICAgY29uc3QgdmFsdWVzID0ga2V5cy5tYXAoY29udGV4dCk7XG4gICAgY29uc3QgZGF0YSA9IGtleXMubWFwKChrZXksIGluZGV4KSA9PiB7XG4gICAgICAvLyBDcmVhdGUgc2x1ZyBmcm9tIGZpbGVuYW1lXG4gICAgICBjb25zdCBzbHVnID0ga2V5XG4gICAgICAgIC5yZXBsYWNlKC9eLipbXFxcXFxcL10vLCBcIlwiKVxuICAgICAgICAuc3BsaXQoXCIuXCIpXG4gICAgICAgIC5zbGljZSgwLCAtMSlcbiAgICAgICAgLmpvaW4oXCIuXCIpO1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgLy8gUGFyc2UgeWFtbCBtZXRhZGF0YSAmIG1hcmtkb3duYm9keSBpbiBkb2N1bWVudFxuICAgICAgY29uc3QgZG9jdW1lbnQgPSBtYXR0ZXIodmFsdWUuZGVmYXVsdCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb2N1bWVudCxcbiAgICAgICAgc2x1ZyxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0pKHJlcXVpcmUuY29udGV4dChcIi4uLy4uL3Bvc3RzXCIsIHRydWUsIC9cXC5tZCQvKSlcbiAgICAuc29ydChcbiAgICAgIChhLCBiKSA9PiBuZXcgRGF0ZShiLmRvY3VtZW50LmRhdGEuZGF0ZSkgLSBuZXcgRGF0ZShhLmRvY3VtZW50LmRhdGEuZGF0ZSlcbiAgICApXG4gICAgLmZpbHRlcigocCkgPT4ge1xuICAgICAgcmV0dXJuIHAuZG9jdW1lbnQuZGF0YS5jYXRlZ29yeSA9PT0gY2F0ZWdvcnk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wczoge1xuICAgICAgY2F0ZWdvcnksXG4gICAgICBwb3N0czogSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwb3N0cykpLFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTdGF0aWNQYXRocygpIHtcbiAgLy9nZXQgcG9zdHMgJiBjb250ZXh0IGZyb20gZm9sZGVyXG4gIGNvbnN0IHBvc3RzID0gKChjb250ZXh0KSA9PiB7XG4gICAgY29uc3Qga2V5cyA9IGNvbnRleHQua2V5cygpO1xuICAgIGNvbnN0IHZhbHVlcyA9IGtleXMubWFwKGNvbnRleHQpO1xuICAgIGNvbnN0IGRhdGEgPSBrZXlzLm1hcCgoa2V5LCBpbmRleCkgPT4ge1xuICAgICAgLy8gQ3JlYXRlIHNsdWcgZnJvbSBmaWxlbmFtZVxuICAgICAgY29uc3Qgc2x1ZyA9IGtleVxuICAgICAgICAucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgXCJcIilcbiAgICAgICAgLnNwbGl0KFwiLlwiKVxuICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgIC5qb2luKFwiLlwiKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2luZGV4XTtcbiAgICAgIC8vIFBhcnNlIHlhbWwgbWV0YWRhdGEgJiBtYXJrZG93bmJvZHkgaW4gZG9jdW1lbnRcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gbWF0dGVyKHZhbHVlLmRlZmF1bHQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgIHNsdWcsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9KShyZXF1aXJlLmNvbnRleHQoXCIuLi8uLi9wb3N0c1wiLCB0cnVlLCAvXFwubWQkLykpXG4gICAgLnNvcnQoXG4gICAgICAoYSwgYikgPT4gbmV3IERhdGUoYi5kb2N1bWVudC5kYXRhLmRhdGUpIC0gbmV3IERhdGUoYS5kb2N1bWVudC5kYXRhLmRhdGUpXG4gICAgKVxuICAgIC5tYXAoKHApID0+IHAuZG9jdW1lbnQuZGF0YS5jYXRlZ29yeSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoczogcG9zdHMubWFwKChjYXRlZ29yeSkgPT4gKHtcbiAgICAgIHBhcmFtczogeyBzbHVnOiBjYXRlZ29yeSB9LFxuICAgIH0pKSxcbiAgICBmYWxsYmFjazogZmFsc2UsXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhdGVnb3J5O1xuIl19 */\\n/*@ sourceURL=/Users/kameron/Desktop/kamerontanseli.github.io/src/pages/category/[slug].js */\"), __jsx(\"div\", {\n    className: \"jsx-419940685\" + \" \" + \"columns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    width: 150,\n    src: \"/static/profile.png\",\n    alt: \"Kameron Tanseli\",\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-419940685\" + \" \" + \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      textTransform: \"capitalize\"\n    },\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, category))), __jsx(\"div\", {\n    className: \"jsx-419940685\" + \" \" + \"articles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, __jsx(\"table\", {\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, __jsx(\"tbody\", {\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, posts.map(post => __jsx(\"tr\", {\n    key: post.slug,\n    className: \"jsx-419940685\" + \" \" + \"article-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-419940685\" + \" \" + \"article-item__date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, new Date(post.document.data.date).toDateString()), __jsx(\"td\", {\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, __jsx(\"a\", {\n    href: `/blog/${post.slug}/`,\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }\n  }, post.document.data.title)), __jsx(\"td\", {\n    className: \"jsx-419940685\" + \" \" + \"article-item__category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, __jsx(\"a\", {\n    href: `/category/${post.document.data.category}/`,\n    className: \"jsx-419940685\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 19\n    }\n  }, post.document.data.category))))))));\n};\n\nexport async function getStaticProps({\n  params\n}) {\n  const category = params.slug; //get posts & context from folder\n\n  const posts = (context => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      // Create slug from filename\n      const slug = key.replace(/^.*[\\\\\\/]/, \"\").split(\".\").slice(0, -1).join(\".\");\n      const value = values[index]; // Parse yaml metadata & markdownbody in document\n\n      const document = matter(value.default);\n      return {\n        document,\n        slug\n      };\n    });\n    return data;\n  })(require.context(\"../../posts\", true, /\\.md$/)).sort((a, b) => new Date(b.document.data.date) - new Date(a.document.data.date)).filter(p => {\n    return p.document.data.category === category;\n  });\n\n  return {\n    props: {\n      category,\n      posts: JSON.parse(JSON.stringify(posts))\n    }\n  };\n}\nexport async function getStaticPaths() {\n  //get posts & context from folder\n  const posts = (context => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      // Create slug from filename\n      const slug = key.replace(/^.*[\\\\\\/]/, \"\").split(\".\").slice(0, -1).join(\".\");\n      const value = values[index]; // Parse yaml metadata & markdownbody in document\n\n      const document = matter(value.default);\n      return {\n        document,\n        slug\n      };\n    });\n    return data;\n  })(require.context(\"../../posts\", true, /\\.md$/)).sort((a, b) => new Date(b.document.data.date) - new Date(a.document.data.date)).map(p => p.document.data.category);\n\n  return {\n    paths: posts.map(category => ({\n      params: {\n        slug: category\n      }\n    })),\n    fallback: false\n  };\n}\nexport default Category;","map":{"version":3,"sources":["/Users/kameron/Desktop/kamerontanseli.github.io/src/pages/category/[slug].js"],"names":["matter","SEO","Category","category","posts","textTransform","map","post","slug","Date","document","data","date","toDateString","title","getStaticProps","params","context","keys","values","key","index","replace","split","slice","join","value","default","require","sort","a","b","filter","p","props","JSON","parse","stringify","getStaticPaths","paths","fallback"],"mappings":"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","sourcesContent":["import matter from \"gray-matter\";\nimport SEO from \"../../components/new/Seo\";\n\nconst Category = ({ category, posts }) => {\n  return (\n    <div>\n      <SEO title={`Kameron Tanseli | ${category}`} />\n      <style jsx>{`\n        .columns {\n          display: grid;\n          grid-template-columns: 1fr;\n          grid-gap: 2em;\n          padding-bottom: 2em;\n          border-bottom: 1px solid #eee;\n        }\n        img {\n          max-width: 60px;\n          border-radius: 60px;\n        }\n        .content > *:first-child {\n          margin-top: 0;\n        }\n        .content > *:last-child {\n          margin-bottom: 0;\n        }\n\n        .articles {\n          overflow: auto;\n        }\n\n        .articles table {\n          width: 100%;\n          text-align: left;\n        }\n\n        .articles table tr > td {\n          padding: 1em 0;\n        }\n\n        .articles table tr > td:first-child {\n          width: 150px;\n          color: #676767;\n        }\n\n        .article-item__category > a {\n          text-transform: capitalize;\n          font-size: 0.65em;\n          padding: 5px 10px;\n          background-color: #eee;\n          border-radius: 4px;\n          text-decoration: none;\n        }\n\n        .article-item__category > a:hover {\n          background-color: #ddd;\n        }\n\n        @media screen and (max-width: 769px) {\n          .columns {\n            grid-template-columns: 1fr;\n          }\n          .article-item__date {\n            display: none;\n          }\n        }\n      `}</style>\n      <div className=\"columns\">\n        <img width={150} src=\"/static/profile.png\" alt=\"Kameron Tanseli\" />\n        <div className=\"content\">\n          <h1 style={{ textTransform: \"capitalize\" }}>{category}</h1>\n        </div>\n      </div>\n      <div className=\"articles\">\n        <table>\n          <tbody>\n            {posts.map((post) => (\n              <tr className=\"article-item\" key={post.slug}>\n                <td className=\"article-item__date\">\n                  {new Date(post.document.data.date).toDateString()}\n                </td>\n                <td>\n                  <a href={`/blog/${post.slug}/`}>{post.document.data.title}</a>\n                </td>\n                <td className=\"article-item__category\">\n                  <a href={`/category/${post.document.data.category}/`}>\n                    {post.document.data.category}\n                  </a>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport async function getStaticProps({ params }) {\n  const category = params.slug;\n  //get posts & context from folder\n  const posts = ((context) => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      // Create slug from filename\n      const slug = key\n        .replace(/^.*[\\\\\\/]/, \"\")\n        .split(\".\")\n        .slice(0, -1)\n        .join(\".\");\n      const value = values[index];\n      // Parse yaml metadata & markdownbody in document\n      const document = matter(value.default);\n      return {\n        document,\n        slug,\n      };\n    });\n    return data;\n  })(require.context(\"../../posts\", true, /\\.md$/))\n    .sort(\n      (a, b) => new Date(b.document.data.date) - new Date(a.document.data.date)\n    )\n    .filter((p) => {\n      return p.document.data.category === category;\n    });\n\n  return {\n    props: {\n      category,\n      posts: JSON.parse(JSON.stringify(posts)),\n    },\n  };\n}\n\nexport async function getStaticPaths() {\n  //get posts & context from folder\n  const posts = ((context) => {\n    const keys = context.keys();\n    const values = keys.map(context);\n    const data = keys.map((key, index) => {\n      // Create slug from filename\n      const slug = key\n        .replace(/^.*[\\\\\\/]/, \"\")\n        .split(\".\")\n        .slice(0, -1)\n        .join(\".\");\n      const value = values[index];\n      // Parse yaml metadata & markdownbody in document\n      const document = matter(value.default);\n      return {\n        document,\n        slug,\n      };\n    });\n    return data;\n  })(require.context(\"../../posts\", true, /\\.md$/))\n    .sort(\n      (a, b) => new Date(b.document.data.date) - new Date(a.document.data.date)\n    )\n    .map((p) => p.document.data.category);\n\n  return {\n    paths: posts.map((category) => ({\n      params: { slug: category },\n    })),\n    fallback: false,\n  };\n}\n\nexport default Category;\n"]},"metadata":{},"sourceType":"module"}